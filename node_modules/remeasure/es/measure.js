var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// external dependencies
import PropTypes from 'prop-types';
import React, { Component, PureComponent } from 'react';

// classes
import Measured from './Measured';

// constants
import { KEY_NAMES } from './constants';

// utils
import { getComponentName, getMeasureKeys } from './utils';

export var createSetOriginalRef = function createSetOriginalRef(instance) {
  /**
   * @private
   *
   * @function setOriginalRef
   *
   * @description
   * set the reference to the original component instance to the instance of the HOC
   *
   * @param {HTMLElement|ReactComponent} component the component instance to assign
   */
  return function (component) {
    instance.originalComponent = component;
  };
};

/**
 * @private
 *
 * @function getMeasuredComponent
 *
 * @description
 * get the measured component class with the ref to get the original component
 *
 * @param {ReactComponent} RenderedComponent the component to render
 * @returns {ReactComponent} the measured component rendering RenderedComponent
 */
var getMeasuredComponent = function getMeasuredComponent(RenderedComponent) {
  var _class, _temp;

  var componentPrototype = Object.getPrototypeOf(RenderedComponent);
  var shouldSetRef = componentPrototype === Component || componentPrototype === PureComponent;

  return _temp = _class = function (_Component) {
    _inherits(MeasuredComponent, _Component);

    function MeasuredComponent() {
      _classCallCheck(this, MeasuredComponent);

      return _possibleConstructorReturn(this, _Component.apply(this, arguments));
    }

    MeasuredComponent.prototype.render = function render() {
      var _props = this.props,
          _measuredComponentChildren = _props._measuredComponentChildren,
          _measuredComponentRef = _props._measuredComponentRef,
          props = _objectWithoutProperties(_props, ['_measuredComponentChildren', '_measuredComponentRef']);

      return (
        /* eslint-disable prettier */
        React.createElement(RenderedComponent, _extends({
          children: _measuredComponentChildren,
          ref: shouldSetRef ? _measuredComponentRef : null
        }, props))
        /* eslint-enable */

      );
    };

    return MeasuredComponent;
  }(Component), _class.displayName = 'Measured(' + getComponentName(RenderedComponent) + ')', _class.propTypes = {
    _measuredComponentChildren: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
    _measuredComponentRef: PropTypes.func.isRequired
  }, _temp;
};

/**
 * @private
 *
 * @function getMeasuredHoc
 *
 * @description
 * get a higher-order component that renders the component passed, injecting the measurements in as props
 *
 * @param {Array<string>} keys the keys to listen for changes to
 * @param {Object} options the options passed
 * @returns {function(ReactComponent): ReactComponent} the decorator that receives the component
 */
export { getMeasuredComponent };
var getMeasuredHoc = function getMeasuredHoc(keys, options) {
  var childrenOptionIgnored = options.children,
      renderOptionIgnored = options.render,
      restOfOptions = _objectWithoutProperties(options, ['children', 'render']);

  return function (RenderedComponent) {
    var _class2, _temp3;

    var component = getMeasuredComponent(RenderedComponent);

    return _temp3 = _class2 = function (_Component2) {
      _inherits(MeasuredHoc, _Component2);

      function MeasuredHoc() {
        var _temp2, _this2, _ret;

        _classCallCheck(this, MeasuredHoc);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp2 = (_this2 = _possibleConstructorReturn(this, _Component2.call.apply(_Component2, [this].concat(args))), _this2), _this2.originalComponent = null, _this2.setOriginalRef = createSetOriginalRef(_this2), _temp2), _possibleConstructorReturn(_this2, _ret);
      }

      // instance values


      // instance methods


      MeasuredHoc.prototype.render = function render() {
        var _props2 = this.props,
            children = _props2.children,
            renderIgnored = _props2.render,
            props = _objectWithoutProperties(_props2, ['children', 'render']);

        return React.createElement(Measured, _extends({}, props, restOfOptions, {
          _measuredComponentChildren: children,
          _measuredComponentRef: this.setOriginalRef,
          component: component,
          keys: keys
        }));
      };

      return MeasuredHoc;
    }(Component), _class2.displayName = 'MeasuredHoc', _class2.propTypes = {
      children: PropTypes.oneOfType([PropTypes.func, PropTypes.node, PropTypes.string]),
      render: PropTypes.func
    }, _temp3;
  };
};

/**
 * @private
 *
 * @function measure
 *
 * @description
 * based on the keys and options passed, get the measured HOC
 *
 * @param {Array<string>|function|Object|string} passedKeys the keys to listen to, or options, or the component itself
 * @param {Object} [passedOptions={}] the options when creating the measured component
 * @returns {function} the HOC that will render the component passed with measurements injected
 */
export { getMeasuredHoc };
var measure = function measure(passedKeys) {
  var passedOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return typeof passedKeys === 'function' ? getMeasuredHoc(KEY_NAMES, passedOptions)(passedKeys) : getMeasuredHoc(getMeasureKeys(passedKeys), passedKeys && passedKeys.constructor === Object ? passedKeys : passedOptions);
};

KEY_NAMES.forEach(function (key) {
  measure[key] = function (options) {
    return typeof options === 'function' ? measure([key])(options) : measure([key], options);
  };
});

export { measure };